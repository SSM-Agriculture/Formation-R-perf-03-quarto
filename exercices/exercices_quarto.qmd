---
title: "Exercices Quarto"
date-modified: today
css: ../styles/exercices.css
format: 
  html:
    self-contained: true
    code-fold: true
    code-tools: true
    number-sections: true
    smooth-scroll: true
    output-file: exercices_corriges_quarto.html
  # pdf: 
  #   output-file: exercices_corriges_quarto.pdf
  # typst: 
  #   output-file: exercices_corriges_quarto.pdf
crossref:
  fig-prefix: figure
  fig-title:  Figure
  tbl-prefix: tableau
  tbl-title:  Tableau
  title-delim: " &ndash; "
toc: true
always_allow_html: true
editor: source
lang: fr
editor_options: 
  chunk_output_type: console
execute: 
  eval: true
  echo: true
  warning: false
---

Exercices de la [formation R perfectionnement](https://ssm-agriculture.github.io/Formation-R-perf-03-quarto/), module Quarto, des [formations à R dispensées au MASA](https://ssm-agriculture.github.io/site-formations-R/).

Pour bénéficier de la version la plus récente de Quarto, vous pouvez travailler --pour cette formation-- sur la [version de pré-production de CERISE](https://rstudio-pprd.agriculture.rie.gouv.fr/).

```{r}
#| label: setup
#| echo: true
#| eval: true
#| code-fold: false

# ces paquets seront nécessaires pour la suite
library(readr)   # lecture des données
library(dplyr)   # manipulation des données
                 # et d'autres au fur et à mesure...
```


## Découvrir l'interface {#interface}

- `Fichier` \> `Nouveau projet` \> `Nouveau répertoire` \> `Projet Quarto` \>
- choisir un répertoire, par exemple : *formation* dans *~*  
- moteur <kbd>knitr</kbd>

ou, dans un projet existant : 

- `Fichier` \> `Nouveau fichier` \> `R Quarto document`

Basculer successivement sur l'éditeur texte brut / [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM)[^wysiwym]

[^wysiwym]: What You See Is What You Mean

Tricoter le document

## Produire un document simple {#doc-simple}

### Formater du texte

- Nouveau document Quarto
- Insérer du [texte](https://fr.lipsum.com/feed/html)
- Insérer des titres de différent niveau
- Passer en gras, italique
- Insérer une image
- Faire une liste

Tricoter le document.

## Code {#code}


### Présentation des données

Utilisation d'un extrait randomisé du RA 2020. Ouvrir le fichier dans *donnees/ra_2020.rds*.

::: {.panel-tabset}
#### Code

```{r}
#| label: donnees
#| echo: true
#| eval: true

ra <- read_rds("donnees/ra_2020.rds") 
```

#### Aperçu

```{r}
#| label: donnees-glimpse
#| echo: false

glimpse(ra)
```
:::

### Utiliser les résultats de calculs

- Insérer un code R chargeant les paquets nécessaires, ouvrant les données du RA et calculant la SAU totale
- Exécuter (sortie dans la console)
- Tricoter (aperçu HTML)

```{r}
#| label: sau-tot-brut

ra |> 
  summarise(sau_tot_ha = sum(sau_tot, na.rm = TRUE))
```


- Reprendre le code précédent, sauver le résultat dans une variable.
- Afficher le résultat au sein d'une phrase

```{r}
#| label: sau-tot-assigne
#| eval: true

sau_tot_ha <- ra |> 
  summarise(sau_tot_ha = sum(sau_tot, na.rm = TRUE)) |> 
  pull(1)
```

> La SAU totale vaut `r sau_tot_ha` ha.

- Formater le résultat (arrondi, séparateur décimal, séparateur de milliers)

> La SAU totale vaut `r format(round(sau_tot_ha, 1), decimal.mark = ",", big.mark = " ")` ha.

- Utiliser des `options()` ou des `knitr::knit_hooks()` pour ne pas formater chaque sortie

```{r}
#| label: options

options(OutDec = ",",
        digits = 1,
        scipen = 1e3)

# ou par exemple
knitr::knit_hooks$set(inline = function(x) {
  if (!is.numeric(x)) { 
    x
  } else {
    prettyNum(x, big.mark = " ")
  }
})
```

> La SAU totale vaut `r sau_tot_ha` ha.

### Déboguer

- Exécuter chunk par chunk
- Utiliser "Exécuter tous les chunks au-dessus".

## Afficher des tableaux {#tableaux}

Afficher les premières lignes du data.frame `ra`.

### Tibble brut

```{r}
#| label: tbl-ra-brut

ra
```

### HTML mis en forme

Afficher les premières lignes du data.frame `ra` avec une mise en forme plus élaborée, avec {gt} ou `knitr::kable()`.

::: {.panel-tabset}

#### gt

```{r}
#| label: tbl-ra-gt

library(gt) # tableaux

ra |> 
  slice_head(n = 5) |> 
  gt()
```

#### knitr

```{r}
#| label: tbl-ra-knitr

library(knitr) # moteur de transfo markdown

ra |> 
  slice_head(n = 5) |> 
  kable()
```
:::

#### Interactif

Afficher les 100 premières ligne de `ra` dans un tableau interactif Javascript avec datatable (package {DT}).


```{r}
#| label: tbl-ra-dt
#| eval: !expr knitr::is_html_output() 

library(DT) # tableaux interactifs

ra |> 
  slice_head(n = 100) |> 
  datatable(
    options = list(
      language = list(
        url = "https://cdn.datatables.net/plug-ins/1.10.11/i18n/French.json")))
```

::: {.content-visible when-format="pdf"}
Tableau interactif non-visualisable au format PDF.
:::

## Graphiques {#graphiques}

- Ajouter un graphique dans le document Quarto.
  *Ex.* : Top 10 des SAU départementales à partir de `ra`.
- Préciser un titre de figure
  
```{r}
#| label: fig-sau
#| fig-cap: "SAU top 10"

library(ggplot2) # graphiques
library(forcats) # facteurs

graph_sau <- ra |> 
  summarise(.by = c(siege_lib_dep),
          sau_dep_ha = sum(sau_tot, na.rm = TRUE),
          n = paste(n(), "exploit.")) |> 
  slice_max(sau_dep_ha, n = 10) |> 
  mutate(siege_lib_dep = fct_reorder(siege_lib_dep, sau_dep_ha)) |> 
  ggplot(aes(siege_lib_dep,
             sau_dep_ha,
             text = n)) +
  geom_col() +
  coord_flip() + 
  labs(title = "10 plus grandes SAU",
       x = "dép.",
       y = "surface (ha)")

graph_sau
```

Ajouter une phrase dans votre texte indiquant que la @fig-sau montre des résultats intéressants (insertion d'un renvoi).


### Interactivité

- Activer l'interactivité sur un graphique avec [{ggiraph}](https://davidgohel.github.io/ggiraph/)

```{r}
#| label: fig-sau-interactive
#| fig-cap: "SAU top 10 (interactive)"

library(plotly) # graphiques interactifs

graph_sau |> 
  ggplotly(tooltip = "n")
```

### Disposition

Il est possible de choisir l'emprise et l'emplacement des graphiques (disponible aussi pour d'autres éléments).  

- Placer un graphique en marge avec l'option `column:`.  

```{r}
#| label: fig-sau-interactive-marge
#| fig-cap: "Distribution de la SAU"
#| column: margin

densite_sau <- ra |> 
  ggplot() +
  geom_density(aes(sau_tot), fill = "darkslategray3")

densite_sau
```

  [doc](https://quarto.org/docs/authoring/article-layout.html)
  
  Par exemple : densité ou histogramme de la `sau_tot`.

- Disposer deux graphiques côte à côte avec l'option `layout-ncol:`.  
  Il est possible d'ajouter des sous-légendes pour chaque graphique [doc](https://quarto.org/docs/authoring/figures.html#complex-layouts)

```{r}
#| label: fig-graphiques-assembles
#| fig-cap: "SAU"
#| fig-subcap: 
#|  - Distribution
#|  - Top 10
#| layout-ncol: 2

densite_sau
graph_sau
```


## Cartes

Ouvrir la couche `region` du fichier *~/CERISE/03-Espace-de-Diffusion/000_Referentiels/0040_Geo/IGN/adminexpress/adminexpress_cog_simpl_000_2024.gpkg* et l'afficher avec {leaflet}.

```{r}
#| label: fig-carte
#| fig-cap: Carte
#| column: page

library(sf)      # SIG
library(leaflet) # cartographie dynamique

"~/CERISE/03-Espace-de-Diffusion/000_Referentiels/0040_Geo/IGN/adminexpress/adminexpress_cog_simpl_000_2024.gpkg" |> 
  read_sf(layer = "region") |> 
  leaflet() |>
  addTiles() |> 
  addPolygons()
```


## HTML avec éléments interactifs {visibility="uncounted"}

// TODO


## PDF

Sur CERISE en pré-prod uniquement (ou en prod fin février)

- (Partir d'un nouveau document ou enlever les éléments interactifs {DT} ou {leaflet})
- Changer le format dans l'en-tête (`typst` ou `pdf`)
- Tricoter

## Tableau de bord {visibility="uncounted"}

// TODO


## Rapports paramétrés

- Faire un rapport régional donnant le nom de la région, la SAU, les UGB totaux.
- Générer le rapport pour toutes les régions


## Méta {.appendix .unnumbered}

```{r}
#| label: source-et-forge
#| echo: false
#| eval: true
#| warning: false

meta_qmd_source <- xfun::with_ext(knitr::current_input(dir = TRUE), "qmd") |> 
  stringr::str_replace("/var/data/nfs", "~")

meta_remote <- system("git remote -v", intern = TRUE)
meta_url <- if (any(grep(pattern = "^origin", x = meta_remote))) {
  meta_i <- grep(pattern = "^origin.*\\s\\(fetch\\)", x = meta_remote)
  gsub("(\\.git)?\\s\\(fetch\\)", "", strsplit(meta_remote[meta_i], "\\t")[[1]][[2]])
} else {
  ""
}
```

Ce document est produit par :  
  *`r meta_qmd_source`*
  
```{r}
#| label: afficher-forge
#| echo: false
#| eval: true
#| results: asis

cat("### Dépôt Git {.appendix .unnumbered}

Ce projet est versionné dans :  
[", meta_url, "](", meta_url, ")")
```


