---
title: "Formation Quarto"
subtitle: "Parcours de formation R perfectionnement SSP"
date-modified: "`r Sys.Date()`"
title-slide-attributes:
  data-background-image: images/ze-paulo-gasparotto-GeReAnOMiZ8-unsplash.jpg
  data-background-size: cover
  data-background-opacity: "0.5"
toc: true
format:
  revealjs:
    incremental: true
    width: 1600
    margin: 0.05
    toc-depth: 1
    theme: [solarized, styles/masa.scss]
    logo: images/logo_masa_mail.png
    preview-links: auto
    show-slide-number: all
    slide-number: c/t
    slide-level: 3
    # self-contained: true
    # embed-resources: true
    code-block-height: 650px
  html:
    output-file: formation_quarto_document.html
    # self-contained: true
    # embed-resources: true
    code-links:
      - text: Code source
        href: https://github.com/SSM-Agriculture/Formation-R-perf-03-quarto
  # pdf:
  #   output-file: formation_quarto_document.pdf
  # typst:
  #   output-file: formation_quarto_document.pdf
pdf-engine: lualatex
always_allow_html: true
tbl-cap-location: bottom
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    dev: "ragg_png"
execute: 
  echo: true
  warning: false
  error: false
bibliography: formation.bib
lang: fr
csl: styles/biblio.csl
nocite: |
  @*
---

## Pré-requis techniques

- Quarto (≥ 1.5)
- RStudio (≥ 2022.07) et R (≥ 4)

```{r}
#| label: setup

library(dplyr)   # manip. données
library(ggplot2) # graphiques
library(sf)      # carto.
library(leaflet) # carto.
library(gt)      # formatage tableaux

# un theme ggplot utilisant la typographie Marianne
theme_masa <- function(...) {
  theme_grey(...) %+replace%
    theme(
      text = element_text(family = "Marianne"))
}
```

::: notes
La police Marianne doit être installée sur le poste
:::

# Introduction


::: callout-caution
DIAPORAMA EN COURS DE CONSTRUCTION
:::

Un module des [formations à R dispensées au MASA](https://ssm-agriculture.github.io/site-formations-R/)


## Objectifs

-   Intérêt des publications reproductibles
-   Découvrir la versatilité de Quarto
-   Réaliser un document, de simple à complexe

::: notes
versatile : pour le langage en entrée et les formats en sortie (diapo suivante)
:::

## Quarto

### Un système de publication

![Principe de fonctionnement (source RStudio)](images/rstudio-qmd-how-it-works.png){#fig-works}

::: notes
- Mélange code et texte : une partie du document est générée par des données (tableaux, graphiques ou texte)
- Successeur de Rmarkdown
- Commandes complémentaires LaTeX ou Typst pour le PDF
- Pandoc est un convertisseur "universel" de formats de texte
:::


### Formats/moteurs

:::::: columns
::: {.column width="50%"}
-   [multi-format](https://quarto.org/docs/gallery/)
    -   HTML (rapports, livres, présentations)
    -   PDF
    -   Appli web (statique/Shiny) : blog, site, tableau de bord
    -   Powerpoint
    -   MS Word
:::

::: {.column width="50%"}
-   multi-langage
    -   R
    -   Python
    -   [Observable](https://observablehq.com/)
    -   [Julia](https://julialang.org/)
:::
::::::

::: notes
Le format PDF nécessite {tinytex}
:::


## Avantages

- intégration avec R
- reproductibilité
  - session vierge à chaque génération
  - limiter les copier/coller entre outils
  - prise en compte des changements de données ou de méthodes
- interactivité possible dans le document (HTML)
- versionnement avec git

::: notes
- afficher du code dans le doc
- éviter les copier/coller : synchronisation analyse/résultats
- faciliter la reproductibilité avec {renv}
:::

## Inconvénients

-   syntaxe (markdown)
-   génération active du rendu pour visualiser
-   débogage parfois plus complexe

::: notes
- Mais disponibilité d'un éditeur visuel [What You See Is What You Mean](https://en.wikipedia.org/wiki/WYSIWYM) dans RStudio.
- Asynchrone
:::

## Sur CERISE

Un paquet {quarto} et un binaire `quarto` (ils sont pré-installés sur CERISE).

Vérification dans le terminal :

```{.bash}
quarto check install
quarto check knitr
```

::: callout-note
### Si nécesaire
``` r
install.packages("quarto")
```

Le format PDF nécessite LaTeX.

```{.bash}
quarto install tinytex
```
:::

::: notes
- Le programme est livré avec RStudio (mais peut être installé à part aussi)
- La paquet n'est pas indispensable mais peut être utile
- Typst n'est pas encore disponible sur CERISE (sauf en pré-prod) pour générer du PDF sans LaTeX
:::

# Structure et syntaxe

::: notes
On passe en revue rapidement les éléments d'un document Quarto, puis on revient sur chaque éléments en détail par la suite
:::

----

````{.markdown}
---
title: "Litany against fear"
author: "Bene Gesserit"
---

I must not fear. *Fear is the mind-killer*. Fear is the little-death that
brings total obliteration. 

```{{python}}
import numpy as np
np.exp(np.pi * complex(0, 1)) + 1
```

**I will face my fear.** I will permit it to pass over me and through me.

```{{r}}
somme <- sum(1:10)
```

And when it has gone past I will turn the `{{r}} somme` inner eye to see its 
path. Where the fear has gone there will be nothing. 

> Only I will remain.
````
::: notes
Un exemple pour montrer rapidement les différents éléments qu'on décrira ci-après
:::

## markdown

Un langage balisé simplifié

[doc](https://quarto.org/docs/authoring/markdown-basics.html)

::: notes
Inventé en 2004 pour offrir une syntaxe facile à lire et à écrire, en l'état, sans formatage. 
:::

## chunks

Le code exécutable est intégré dans un *chunk* (bloc) :

```{{r}}
#| label: mon-chunk
#| warning: false

1+1
```

<kbd>Ctrl</kbd> <kbd>Alt</kbd> <kbd>i</kbd>

[doc](https://quarto.org/docs/computations/r.html)

::: notes
- détails dans la partie Code
- Triple quote + le langage dans des accolades
- Les commentaires/pipe permettent de préciser des options (la plus grosse différence visible entre Rmarkdown et Quarto)
- `label:` est un identifiant (facultatif mais conseillé)
:::

## En-tête de configuration

- [YAML](https://fr.wikipedia.org/wiki/YAML)
- bloc entre `---`
- Facultatif mais *a minima* : `title:`, `author:`, `date:`, `format:`
- options nombreuses et variables selon les formats

## Rendu

(*knit*)

```{.bash}
quarto render mon_document.qmd
```

<kbd>Ctrl</kbd> <kbd>⇧</kbd> <kbd>k</kbd> ou ![](images/clipboard-660236810.png){width="75pt" style="vertical-align:text-top"} (ou
![](images/clipboard-660236811.png){width="131pt" style="vertical-align:text-top"})

::: notes
Le tricotage/rendu se fait dans une nouvelle session à chaque fois et n'impacte pas votre environnement courant ; de même les objets de votre environnement courant ne sont pas disponibles, par défaut, lors du rendu
:::

::: callout-note
### À vous de jouer

[Exercice 1.](exercices/exercices_corriges_quarto.html#interface) : découvrir l'interface
:::

## Éléments

### Texte

- 2 retours à la ligne pour faire un paragraphe
- 2 espaces et 1 retour à la ligne pour un saut de ligne
- `*` ou `_` pour mettre en *\*italique\** ou en **\*\*gras\*\***
- `[un lien](https://www.example.org/)` → [un lien](https://www.example.org/)
- une portion de texte peut être stylée en [vert]{style="color:darkgreen"} avec `[vert]{style="color:darkgreen"}`
- mais du HTML est aussi possible `<span style="color:red">rouge</span>` pour mettre en <span style="color:red">rouge</span>

[doc](https://quarto.org/docs/authoring/markdown-basics.html)

### Titres

Préfixer le titre avec `#`, `##` ou `###` pour avoir les titres de niveau 1, 2 ou 3, *etc.*.

`#### Titre de niveau 4`

#### Titre de niveau 4

### Listes

::::: columns
::: {.column width="50%"}
``` markdown
- Atréides
  - Leto
  - Jessica
  - Paul
- Harkonnen
  - Vladimir
  - Rabban
  - Feyd-Rautha
```

ou

``` markdown
- Atréides
  * Leto
  * Jessica
  * Paul
- Harkonnen
  + Vladimir
  + Rabban
  + Feyd-Rautha
```
:::

::: {.nonincremental .column width="50%"}
- Atréides
  * Leto
  * Jessica
  * Paul
- Harkonnen
  + Vladimir
  + Rabban
  + Feyd-Rautha
:::
:::::

----

::::: columns
::: {.column width="50%"}
``` markdown
1. Atréides
   - Leto
   - Jessica\
     **2 espaces (ou `\`) + nouvelle ligne + aligner
     pour ajouter du texte dans les items**
   - Paul
2. Harkonnen
   - Vladimir
   - Rabban
   - Feyd-Rautha
```
:::

::: {.nonincremental .column width="50%"}
1. Atréides
   - Leto
   - Jessica\
     **2 espaces (ou `\`) + nouvelle ligne + aligner pour ajouter du texte dans les items**
   - Paul
2. Harkonnen
   - Vladimir
   - Rabban
   - Feyd-Rautha
:::
:::::

::: notes
Renumérotation automatique incrémentée à partir du premier numéro trouvé.
:::

### Liens

``` markdown
[Texte du lien](https://fr.wikipedia.org/wiki/Arrakis)
```

[Texte du lien](https://fr.wikipedia.org/wiki/Arrakis)

### Images

`![Fremen](images/images/dune_book.jpg)`

![Fremen](images/dune_book.jpg "Shai-hulud"){#fig-dune fig-alt="A sand worm on Arrakis"}

``` markdown
![Fremen](images/images/dune_book.jpg "Shai-hulud"){#fig-dune fig-alt="A sand worm on Arrakis"}
```

::: notes
Utiliser le préfixe `fig-` pour l'identifiant afin de pouvoir bénéficier des renvois automatiques et de la numérotation automatique
:::


### Renvois

(*cross-references*)

Un lien automatique est créé si on indique `@fig-dune` : Quarto nous écrit le lien (type et numéro) qui renvoie à @fig-dune.

Les noms des types affichés peuvent être modifiés dans l'en-tête :

``` yaml
---
crossref:
  fig-prefix: figure # par défaut : Figure
  fig-title:  Figure
  tbl-prefix: tableau # par défaut : Tableau
  tbl-title:  Tableau
  title-delim: " &ndash; "
---
```

### Notes de pied de page

Les notes se construisent en ajoutant un `[^1]` dans le texte, avec le `1` pouvant être une numérotation (pas obligatoirement dans l'ordre) ou tout autre mot clé. La note est ensuite introduite avec le même symbole dans un nouveau paragraphe :

`[^1]: texte de la note`

C'est normalement facile[^1] à faire si on se rappelle de la syntaxe.

[^1]: [page d'aide](https://quarto.org/docs/authoring/markdown-basics.html#footnotes) sur les notes de bas de page.


### Équations

Syntaxe LaTeX entre des `$` (inline) ou `$$` (bloc).

``` tex
$\sigma = \sqrt{\frac{1}{N} \sum_{i=1}^N (x_i - \mu)^2},\text{ où } \mu = \frac{1}{N} \sum_{i=1}^N x_i$
```

$$\sigma = \sqrt{\frac{1}{N} \sum_{i=1}^N (x_i - \mu)^2},\text{ où } \mu = \frac{1}{N} \sum_{i=1}^N x_i$$ [doc](https://quarto.org/docs/authoring/markdown-basics.html#equations)


### Citations/bibliographie

Avec [Zotero](https://www.zotero.org/) et l'extension [Better BibTeX](https://retorque.re/zotero-better-bibtex/) pour auto-exporter en BibTeX la collection quand elle est modifiée.

Préciser le fichier utilisé en en-tête, puis utilisation des identifiants du fichier BibTex.

``` markdown
---
title: "Mon document"
bibliography: formation_quarto.bib
---

Comme le dit @rdevelopmentcoreteamLanguageEnvironmentStatistical2010 :

> Lorem ipsum dolor sit amet[@rstudioGuide2024], consectetur adipiscing elit
```

Comme le dit @rdevelopmentcoreteamLanguageEnvironmentStatistical2010 :

> Lorem ipsum dolor sit amet[@rstudioGuide2024], consectetur adipiscing elit

----

La bibliographie est directement générée :

-   en fin de document ou

-   après un \<div\> identifié avec #refs ex. :

    ``` markdown
    ## Références
    ::: {#refs}
    :::
    ```

[doc](https://quarto.org/docs/authoring/citations.html)

### Libellés

(*Callout*)

Les "libellés" permettent de mettre en exergue des informations complémentaires.

``` markdown
:::{.callout-note}
Il existe cinq types de libellés : 
`note`, `tip`, `warning`, `caution` et `important`.
:::
```

::: callout-note
Il existe cinq types de libellés : `note`, `tip`, `warning`, `caution` et `important`.
:::

----

``` markdown
::: callout-warning
Suite aux nombreux manquements à l’obligation de contrôle hebdomadaire (...)
:::
```

::: callout-warning
Suite aux nombreux manquements à l'obligation de contrôle hebdomadaire de l'étanchéité des colonnettes à crémaillère (...)
:::

``` markdown
::: callout-warning
#### Attention

Le caisson de calibrage de la bride du commutateur à fuseaux (...)
:::
```

::: callout-warning
#### Attention

Le caisson de calibrage de la bride du commutateur à fuseaux rotatifs est HORS-SERVICE
:::


[doc](https://quarto.org/docs/authoring/callouts.html)

---

::: callout-note
### À vous de jouer

[Exercice 2.](exercices/exercices_corriges_quarto.html#doc-simple) produire un document simple
:::


### Code

```{r}
#| label: exemple-code

iris |> 
  glm(Sepal.Length ~ Sepal.Width, data = _)
```


----

#### Options de bloc de code

-   exécution : 
  - `#| eval:` exécuter le code
  - `#| echo:` afficher le code
-   nommage : 
  - `#| label:` identifiant du chunk
  - `#| fig-cap:` légende du bloc

----

#### Outils

Si on a `#| echo: true` l'utilisateur voit le code

On peut aussi ajouter des outils pour l'utilisateur pour qu'il affiche ou cache les chunks avec, dans l'en-tête YAML :

``` yaml
format: 
  html:
    code-fold: true
    code-tools: true
```

----

#### Sorties de code

- texte, avec :
  - `#| results: markup` ou
  - `cat()` et `#| results: asis`
- tableaux
- images
- éléments interactifs

---

::: callout-note
#### À vous de jouer

[Exercice 3.](exercices/exercices_corriges_quarto.html#code) Code
:::


### Tableaux

Les tableaux sont balisés ainsi en Markdown :

:::::: columns
::: {.column width="50%"}

````{.markdown}
| année | titre                   |
|------:|:------------------------|
|  1965 | Dune                    |
|  1969 | Le Messie de Dune       |
|  1976 | Les Enfants de Dune     |
|  1981 | L'Empereur-Dieu de Dune |
|  1984 | Les Hérétiques de Dune  |
|  1985 | La Maison des mères     |

: Cycle de Dune {#tbl-cycle}
````

:::
::: {.column width="50%"}

| année | titre                   |
|------:|:------------------------|
|  1965 | Dune                    |
|  1969 | Le Messie de Dune       |
|  1976 | Les Enfants de Dune     |
|  1981 | L'Empereur-Dieu de Dune |
|  1984 | Les Hérétiques de Dune  |
|  1985 | La Maison des mères     |

: Cycle de Dune {#tbl-cycle}

:::
::::::

[doc](https://quarto.org/docs/authoring/tables.html)

----

Mais la plupart du temps on affichera des tableaux programmatiquement.

```{r}
#| label: tbl-iris-tibble
#| tbl-cap: "Iris (tibble)"
#| output-location: column

iris |> 
  summarise(.by = Species,
            moy_sepales = sum(Sepal.Length))
```

----

Avec {knitr} ou le paramètre en en-tête :

``` yaml
format:
  html:
    df-print: kable
```

```{r}
#| label: tbl-iris-kable
#| tbl-cap: "Iris (kable)"
#| output-location: column

iris |> 
  summarise(.by = Species,
            moy_sepales = sum(Sepal.Length)) |> 
  knitr::kable()
```

[doc](https://quarto.org/docs/computations/r.html#data-frames)

::: notes
Contrôler l'impression de data.frame avec `df-print: kable` ou `df-print: paged`, `df-print: tibble`
Interactivité javascript `df-print: paged` à voir en exercice
:::

----

ou avec {gt}

```{r}
#| label: tbl-iris-gt
#| tbl-cap: "Iris (gt)"
#| output-location: column

iris |> 
  summarise(.by = Species,
            moy_sepales = sum(Sepal.Length)) |> 
  gt()
```


::: notes
Utiliser le préfixe `tbl-` pour l'identifiant afin de pouvoir bénéficier des renvois automatiques et la numérotation automatique
:::

---

::: callout-note
#### À vous de jouer

[Exercice 4.](exercices/exercices_corriges_quarto.html#tableaux) Tableaux
:::


### Graphiques

```{r}
#| label: fig-iris
#| fig-cap: "Iris"
#| output-location: column
#| fig-alt: Graphique en nuage de points des longueurs et largeurs de pétales par espèce d'Iris
#| out-width: "100%"
#| fig-width: 7
#| fig-height: 5.5
ggplot(iris, aes(Petal.Length, 
                 Petal.Width, 
                 color = Species)) +
  geom_point() +
  theme_masa()
```

Taille d'image dans Quarto [@arel-bundockConsistentFiguresQuarto2024]

::: notes
Interactivité possible avec {plotly} ou {ggiraph}. *cf.* exercices
:::

---

::: callout-note
#### À vous de jouer

[Exercice 5.](exercices/exercices_corriges_quarto.html#graphiques) Graphiques
:::


### Cartes

```{r}
#| label: fig-carte
#| fig-cap: "Exemple Leaflet"
#| out-width: 100%
#| output-location: column
#| eval: !expr knitr::is_html_output() 

"~/CERISE/03-Espace-de-Diffusion/000_Referentiels/0040_Geo/IGN/adminexpress/adminexpress_cog_simpl_000_2024.gpkg" |> 
  read_sf(layer = "region") |> 
  leaflet() |>
  addTiles() |> 
  addPolygons()
```

::: {.content-visible when-format="pdf"}
Carte interactive non-visualisable au format PDF.
:::

::: callout-note
#### À vous de jouer

[Exercice 6.](exercices/exercices_corriges_quarto.html#cartes) Cartes
:::


### Diagrammes

- [Mermaid](https://mermaid.js.org/)
- À construire avec [mermaid.live](https://mermaid.live)

----

::: {.content-visible when-format="html"}
```{mermaid}
%%| output-location: column

flowchart TD
    A[(données)] --> B(importer) 
    B --> C[/données valides/]
    C --> D{"sum(sau > 200)"}
    D -- oui --> E(OK)
    D -- non --> F(Stop)
```
:::

::: {.content-visible when-format="pdf"}
Graphe non-visualisable au format PDF.
:::


## Fonctionnalités avancées

### Rapports paramétrés

````{.markdown filename="mon_document.qmd"}
---
title: Rapport
format:
  html: default
param:
  region: 84
  sortie: knitr
---

## Région `{{r}} params$region`

```{{r}}
sau <- ra |> 
  filter(siege_reg == params$region) |> 
  summarise(.by = siege_dep,
            sau_tot = sum(sau_tot, na.rm = TRUE))

if (params$sortie == "knitr") kable::knitr(sau) else sau
```
````

----

On n'est pas obligé de changer manuellement les paramètres et re-tricoter ; on peut itérer sur une liste :

```{.r}
for (r in c(11, 94, 84, 04)) {
  quarto::quarto_render("mon_document.qmd",
                        execute_params = list(region = r),
                        output_file = paste0("rapport_", r, ".html"))
}
```

résultera en 4 rapports personnalisés : *rapport_11.html*, *rapport_94.html*,...

[doc](https://quarto.org/docs/computations/parameters.html)

---

::: callout-note
#### À vous de jouer

[Exercice 10.](exercices/exercices_corriges_quarto.html#rapports-paramétrés) rapports paramétrés
:::


### Inclusions

En tout point du qmd :

```{.markdown}
{{{< include entete.qmd >}}}
```

[doc](https://quarto.org/docs/authoring/includes.html)

ou dans le YAML pour ajouter de simples en-tête et pieds de page :

````{.markdown}
---
format:
  html:
    include-before-body: en_tete.html
    include-after-body: pied.html
---
````

[doc](https://quarto.org/docs/output-formats/html-basics.html#includes)

### Cache

Pour les calculs longs et rarement variables on peut gagner du temps avec `cache: true` (au niveau document ou chunk).

```{{r}}
#| label: long-traitement
#| cache: true
#| cache-extra : !expr file.mtime("donnees/departements.gpkg")

region <- read_sf("donnees/departements.gpkg") |> 
  st_union()
```

Ne sera exécuté qu'une fois sauf si le code du *chunk* change ou si la date du fichier change ou si on passe à `cache: false`, ou via :

```{.bash}
quarto render mon_document.qmd --cache-refresh
```

[doc](https://quarto.org/docs/computations/caching.html)

::: notes
`cache` peut être défini au niveau projet, document ou chunk.
:::

### Crosstalk {visibility="uncounted"}

// TODO

[doc](https://rstudio.github.io/crosstalk/)


### Dashboards {visibility="uncounted"}

// TODO

[doc](https://quarto.org/docs/dashboards/call)


# Marque de l'État

## Typographie Marianne

Pour textes et graphiques [@servicedinformationdugouvernementCharteGraphiqueLEtat2020]

-   Installer {ragg}, {systemfonts} et {textshaping}

-   Dans l'en-tête yaml du document Quarto :

    ``` yaml
    ---
    mainfont: Marianne
    knitr:
      opts_chunk: 
        dev: "ragg_png"
    ---
    ```

::: notes
Permet d'avoir la police Marianne pour le texte et de la prendre en compte dans les graphiques ggplot.

Autre possibilité (à mettre dans un *chunk* de configuration en début de document) : `knitr::opts_chunk$set(dev = "ragg_png")`
:::

## Couleurs {visibility="uncounted"}

Modification du thème ou des CSS

// TODO


# Références

----

::: {#refs}
:::
